// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceBindingEndpoint service binding endpoint
//
// swagger:model ServiceBindingEndpoint
type ServiceBindingEndpoint struct {

	// host
	// Required: true
	Host *string `json:"host"`

	// ports
	// Required: true
	Ports []string `json:"ports"`

	// protocol
	// Enum: [tcp udp all]
	Protocol *string `json:"protocol,omitempty"`
}

// Validate validates this service binding endpoint
func (m *ServiceBindingEndpoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceBindingEndpoint) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *ServiceBindingEndpoint) validatePorts(formats strfmt.Registry) error {

	if err := validate.Required("ports", "body", m.Ports); err != nil {
		return err
	}

	return nil
}

var serviceBindingEndpointTypeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tcp","udp","all"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceBindingEndpointTypeProtocolPropEnum = append(serviceBindingEndpointTypeProtocolPropEnum, v)
	}
}

const (

	// ServiceBindingEndpointProtocolTCP captures enum value "tcp"
	ServiceBindingEndpointProtocolTCP string = "tcp"

	// ServiceBindingEndpointProtocolUDP captures enum value "udp"
	ServiceBindingEndpointProtocolUDP string = "udp"

	// ServiceBindingEndpointProtocolAll captures enum value "all"
	ServiceBindingEndpointProtocolAll string = "all"
)

// prop value enum
func (m *ServiceBindingEndpoint) validateProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceBindingEndpointTypeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceBindingEndpoint) validateProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.Protocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolEnum("protocol", "body", *m.Protocol); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this service binding endpoint based on context it is used
func (m *ServiceBindingEndpoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ServiceBindingEndpoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceBindingEndpoint) UnmarshalBinary(b []byte) error {
	var res ServiceBindingEndpoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
